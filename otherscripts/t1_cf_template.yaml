AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud Assignment Photo Album Web Application Template

Resources:
  #Image S3 Bucket Policy
  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ImageBucket
                - /*
            Principal: '*'

  # S3 Bucket
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "t1-image-bucket-cf"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: 
              - "*"
            AllowedMethods: 
              - "GET"
            AllowedOrigins: 
              - "*"

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Description: Lambda execution role for all lambda functions
    Properties:
      RoleName: t1-execution-role-cf
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com, apigateway.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['logs:*', 'es:*', 's3:*', 'execute-api:*', 'secretsmanager:*', 'rekognition:*', 'lambda:*', 'lex:*']
                Resource: '*'

  # Lambda Functions
  IndexPhotosLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: ['x86_64']
      Timeout: 60
      FunctionName: "t1-index-photos-cf"
      Runtime: "python3.12"
      Handler: "index-photos.lambda_handler"
      Code:
        S3Bucket: "picsearch-lambdafunctions"
        S3Key: "lambda_function_1.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  SearchPhotosLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: ['x86_64']
      Timeout: 60
      FunctionName: "t1-search-photos-cf"
      Runtime: "python3.12"
      Handler: "search-photos.lambda_handler"
      Code:
        S3Bucket: "picsearch-lambdafunctions"
        S3Key: "lambda_function_2.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  #Frontend S3 Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FrontendBucket
                - /*
            Principal: '*'


  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "t1-frontend-bucket-cf"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      WebsiteConfiguration: 
        IndexDocument: "index.html"

  # Elasticsearch Domain
  ESDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: "7.1"
      DomainName: "t1-photos-cf"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10 # Size in GB.
        VolumeType: "gp2" # General purpose SSD, or specify another type if needed.
      ElasticsearchClusterConfig:
        InstanceType: "t2.small.elasticsearch"
        InstanceCount: 1
        ZoneAwarenessEnabled: False


  # API Gateway
  CloudPhotoAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "T1APIGatewayCF"
      Description: "API for photo album application"
      Body:
        swagger: '2.0'
        info:
          title: T1APIGatewayCF
          description: 'AI Photo Search application, built during the Cloud Computing course at New York University.'
          version: 1.0.0
        schemes:
          - https
        basePath: /v1
        produces:
          - application/json
        paths:
          /search:
            get:
              summary: photo search method
              description: |
                This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
              operationId: searchPhotos
              parameters:
                - in: query
                  name: q
                  schema:
                    type: string
                  description: the string to be searched
              produces:
                - application/json
              responses:
                '200':
                  description: search results
                  schema:
                    $ref: '#/definitions/SearchResponse'
                '403':
                  description: Unauthorized
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
          /upload:
            /{filename}:
              put:
                summary: photo upload method
                description: |
                  This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
                operationId: uploadPhoto
                consumes:
                  - image/png
                  - image/jpg
                  - image/jpeg
                produces:
                  - application/json
                responses:
                  '200':
                    description: S3 PUT operation response
                    schema:
                      type: object
                  '403':
                    description: Unauthorized
                    schema:
                      $ref: '#/definitions/Error'
                  '500':
                    description: Unexpected error
                    schema:
                      $ref: '#/definitions/Error'
        definitions:
          SearchResponse:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/Photo'
          Photo:
            type: object
            properties:
              url:
                type: string
              labels:
                type: array
                items:
                  type: string
          Error:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string

Outputs:
  FrontendBucketName:
    Value: !Ref FrontendBucket
  PhotoBucketName:
    Value: !Ref ImageBucket
  ElasticsearchDomainEndpoint:
    Value: !GetAtt ESDomain.DomainEndpoint
  IndexPhotosLambdaFunctionArn:
    Value: !GetAtt IndexPhotosLambdaFunction.Arn
  SearchPhotosLambdaFunction11Arn:
    Value: !GetAtt SearchPhotosLambdaFunction.Arn
  FrontendBucketNameURL:
    Value: !GetAtt FrontendBucket.WebsiteURL